import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import io
import base64
from streamlit_option_menu import option_menu

# ----- CONFIGURA√á√ÉO DA P√ÅGINA -----
st.set_page_config(
    page_title="An√°lise de Efici√™ncia de M√°quinas",
    page_icon="üè≠",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ----- ESTILOS CSS UNIFICADOS -----
def aplicar_estilos():
    """Aplica estilos CSS unificados para toda a aplica√ß√£o."""
    st.markdown(
        """
        <style>
        /* Estilos gerais */
        .main-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 1rem;
            display: flex;
            justify-content: center;
            flex-direction: column;
        }
        
        /* T√≠tulos e cabe√ßalhos */
        .main-title {
            font-size: 2.5rem;
            font-weight: bold;
            color: #2c3e50;
            text-align: center;
            margin-bottom: 1.5rem;
            padding: 1rem 0;
            border-bottom: 3px solid #3498db;
        }
        
        .section-title {
            font-size: 1.5rem;
            font-weight: bold;
            color: #3498db;
            margin-top: 1.5rem;
            margin-bottom: 1rem;
            text-align: center;
            padding-bottom: 0.5rem;
            border-bottom: 1px solid #e0e0e0;
        }
        
        .sub-header {
            font-size: 1.8rem;
            color: #3498db;
            margin-top: 1.5rem;
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid #3498db;
        }
        
        /* Logo container */
        .logo-container {
            display: flex;
            justify-content: center;
            margin-bottom: 1rem;
            padding: 1rem;
        }
        
        .logo-img {
            max-height: 100px;
            object-fit: contain;
        }
        
        /* M√©tricas e indicadores */
        .metrics-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 1rem;
            margin-bottom: 2rem;
        }
        
        .metric-box {
            background-color: #f8f9fa;
            border-radius: 10px;
            padding: 1.2rem;
            text-align: center;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            transition: transform 0.2s, box-shadow 0.2s;
            border-top: 4px solid #3498db;
            flex: 1;
            min-width: 200px;
            max-width: 250px;
            margin: 0 auto;
        }
        
        .metric-box:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        
        .metric-value {
            font-size: 2rem;
            font-weight: bold;
            color: #2c3e50;
            margin-bottom: 0.5rem;
        }
        
        .metric-label {
            font-size: 1rem;
            color: #7f8c8d;
        }
        
        /* Cont√™ineres e caixas */
        .content-box {
            background-color: #ffffff;
            border-radius: 10px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            max-width: 1100px;
            margin-left: auto;
            margin-right: auto;
        }
        
        .info-box {
            background-color: #e8f4f8;
            border-left: 5px solid #3498db;
            padding: 1rem;
            margin: 1rem 0;
            border-radius: 0.25rem;
        }
        
        /* Gr√°ficos e tabelas */
        .chart-container {
            background-color: #ffffff;
            border-radius: 10px;
            padding: 1rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            transition: transform 0.2s;
            max-width: 900px;
            margin-left: auto;
            margin-right: auto;
            display: flex;
            justify-content: center;
        }
        
        .chart-container:hover {
            transform: translateY(-5px);
        }
        
        .table-container {
            margin-top: 1rem;
            margin-bottom: 2rem;
            background-color: #ffffff;
            border-radius: 10px;
            padding: 1rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            max-width: 1100px;
            margin-left: auto;
            margin-right: auto;
        }
        
        /* Bot√µes e intera√ß√µes */
        .stButton>button {
            background-color: #3498db;
            color: white;
            border-radius: 5px;
            border: none;
            padding: 0.5rem 1rem;
            font-weight: bold;
            transition: background-color 0.3s;
            display: block;
            margin: 0 auto;
        }
        
        .stButton>button:hover {
            background-color: #2980b9;
        }
        
        /* Rodap√© */
        .footer {
            text-align: center;
            margin-top: 3rem;
            padding-top: 1rem;
            border-top: 1px solid #e0e0e0;
            color: #7f8c8d;
            font-size: 0.9rem;
        }
        
        /* Ajustes responsivos */
        @media (max-width: 768px) {
            .main-title {
                font-size: 2rem;
            }
            
            .section-title {
                font-size: 1.3rem;
            }
            
            .metric-value {
                font-size: 1.5rem;
            }
            
            .metrics-container {
                flex-direction: column;
                align-items: center;
            }
            
            .metric-box {
                width: 100%;
                max-width: 100%;
            }
        }
        
        /* Melhorias para o menu de navega√ß√£o */
        .nav-container {
            margin-bottom: 2rem;
            display: flex;
            justify-content: center;
        }
        
        /* Ajustes para os expandables */
        .streamlit-expanderHeader {
            font-weight: bold;
            color: #3498db;
        }
        
        /* Melhorias para o file uploader */
        .uploadedFile {
            border: 1px dashed #3498db;
            border-radius: 5px;
            padding: 0.5rem;
        }
        
        /* Melhorias para selectbox */
        .stSelectbox label {
            color: #2c3e50;
            font-weight: 500;
        }
        
        /* Centraliza√ß√£o para elementos Plotly */
        [data-testid="stPlotlyChart"] {
            display: flex;
            justify-content: center;
        }
        
        /* Centraliza√ß√£o para os containers de gr√°ficos */
        .element-container {
            display: flex;
            justify-content: center;
        }
        
        /* Tabelas de resumo */
        .summary-table {
            width: 100%;
            border-collapse: collapse;
            margin: 1rem 0;
        }
        
        .summary-table th {
            background-color: #f2f6f9;
            color: #2c3e50;
            padding: 0.75rem;
            text-align: left;
            border-bottom: 2px solid #3498db;
        }
        
        .summary-table td {
            padding: 0.5rem 0.75rem;
            border-bottom: 1px solid #e0e0e0;
        }
        
        .summary-table tr:hover {
            background-color: #f8f9fa;
        }
        
        .summary-table-container {
            margin-bottom: 2rem;
            overflow-x: auto;
        }
        </style>
        """, 
        unsafe_allow_html=True
    )

# Aplica os estilos CSS
aplicar_estilos()

# ----- FUN√á√ïES AUXILIARES -----
@st.cache_data
def formatar_duracao(duracao):
    """Formata uma dura√ß√£o (timedelta) para exibi√ß√£o amig√°vel."""
    if pd.isna(duracao):
        return "00:00:00"
    
    total_segundos = int(duracao.total_seconds())
    horas = total_segundos // 3600
    minutos = (total_segundos % 3600) // 60
    segundos = total_segundos % 60
    
    return f"{horas:02d}:{minutos:02d}:{segundos:02d}"

@st.cache_data
def obter_nome_mes(mes_ano):
    """Converte o formato 'YYYY-MM' para um nome de m√™s leg√≠vel."""
    if mes_ano == 'Todos':
        return 'Todos os Meses'
    
    try:
        data = datetime.strptime(mes_ano, '%Y-%m')
        meses_pt = {
            1: 'Janeiro', 2: 'Fevereiro', 3: 'Mar√ßo', 4: 'Abril',
            5: 'Maio', 6: 'Junho', 7: 'Julho', 8: 'Agosto',
            9: 'Setembro', 10: 'Outubro', 11: 'Novembro', 12: 'Dezembro'
        }
        return f"{meses_pt[data.month]} {data.year}"
    except:
        return mes_ano

@st.cache_data
def processar_dados(df):
    """Processa e limpa os dados do DataFrame."""
    # Cria uma c√≥pia para evitar SettingWithCopyWarning
    df_processado = df.copy()
    
    # Substitui os valores da coluna 'M√°quina' por nomes espec√≠ficos
    machine_mapping = {
        78: "PET",
        79: "TETRA 1000",
        80: "TETRA 200",
        89: "SIG 1000",
        91: "SIG 200"
    }
    
    # Verifica se a coluna 'M√°quina' existe
    if 'M√°quina' in df_processado.columns:
        df_processado['M√°quina'] = df_processado['M√°quina'].replace(machine_mapping)
    
    # Converte as colunas de tempo para o formato datetime
    for col in ['Inicio', 'Fim']:
        if col in df_processado.columns:
            df_processado[col] = pd.to_datetime(df_processado[col], errors='coerce')
    
    # Processa a coluna de dura√ß√£o
    if 'Dura√ß√£o' in df_processado.columns:
        # Tenta converter a coluna Dura√ß√£o para timedelta
        try:
            df_processado['Dura√ß√£o'] = pd.to_timedelta(df_processado['Dura√ß√£o'])
        except:
            # Se falhar, tenta extrair horas, minutos e segundos e criar um timedelta
            if isinstance(df_processado['Dura√ß√£o'].iloc[0], str):
                def parse_duration(duration_str):
                    try:
                        parts = duration_str.split(':')
                        if len(parts) == 3:
                            hours, minutes, seconds = map(int, parts)
                            return pd.Timedelta(hours=hours, minutes=minutes, seconds=seconds)
                        else:
                            return pd.NaT
                    except:
                        return pd.NaT
                
                df_processado['Dura√ß√£o'] = df_processado['Dura√ß√£o'].apply(parse_duration)
    
    # Adiciona colunas de ano, m√™s e ano-m√™s para facilitar a filtragem
    df_processado['Ano'] = df_processado['Inicio'].dt.year
    df_processado['M√™s'] = df_processado['Inicio'].dt.month
    df_processado['M√™s_Nome'] = df_processado['Inicio'].dt.strftime('%B')  # Nome do m√™s
    df_processado['Ano-M√™s'] = df_processado['Inicio'].dt.strftime('%Y-%m')
    
    # Remove registros com valores ausentes nas colunas essenciais
    df_processado = df_processado.dropna(subset=['M√°quina', 'Inicio', 'Fim', 'Dura√ß√£o'])
    
    return df_processado

# ----- FUN√á√ïES DE C√ÅLCULO DE INDICADORES -----
@st.cache_data
def calcular_disponibilidade(df, tempo_programado):
    """Calcula a taxa de disponibilidade."""
    tempo_total_parado = df['Dura√ß√£o'].sum()
    disponibilidade = (tempo_programado - tempo_total_parado) / tempo_programado * 100
    return max(0, min(100, disponibilidade))

@st.cache_data
def indice_paradas_por_area(df):
    """Calcula o √≠ndice de paradas por √°rea respons√°vel."""
    if '√Årea Respons√°vel' in df.columns:
        area_counts = df['√Årea Respons√°vel'].value_counts(normalize=True) * 100
        return area_counts
    else:
        return pd.Series()

@st.cache_data
def pareto_causas_parada(df):
    """Identifica as principais causas de paradas (Pareto) por dura√ß√£o total."""
    if 'Parada' in df.columns:
        pareto = df.groupby('Parada')['Dura√ß√£o'].sum().sort_values(ascending=False).head(10)
        return pareto
    else:
        return pd.Series()

@st.cache_data
def paradas_mais_frequentes(df):
    """Identifica as paradas mais frequentes por contagem."""
    if 'Parada' in df.columns:
        frequentes = df['Parada'].value_counts().head(10)
        return frequentes
    else:
        return pd.Series()

@st.cache_data
def tempo_medio_paradas(df):
    """Calcula o tempo m√©dio de parada (TMP)."""
    tmp = df['Dura√ß√£o'].mean()
    return tmp

@st.cache_data
def taxa_ocorrencia_paradas(df):
    """Calcula a taxa de ocorr√™ncia de paradas (n√∫mero total de paradas por m√™s)."""
    ocorrencias_mensais = df.groupby('Ano-M√™s').size()
    return ocorrencias_mensais

@st.cache_data
def duracao_total_por_mes(df):
    """Calcula a dura√ß√£o total de paradas por m√™s."""
    duracao_mensal = df.groupby('Ano-M√™s')['Dura√ß√£o'].sum()
    return duracao_mensal

@st.cache_data
def tempo_total_paradas_area(df):
    """Calcula o tempo total de paradas por √°rea."""
    if '√Årea Respons√°vel' in df.columns:
        tempo_por_area = df.groupby('√Årea Respons√°vel')['Dura√ß√£o'].sum()
        return tempo_por_area
    else:
        return pd.Series()

@st.cache_data
def frequencia_categorias_paradas(df):
    """Calcula a frequ√™ncia de paradas por categoria."""
    if 'Parada' in df.columns:
        frequencia = df['Parada'].value_counts()
        return frequencia
    else:
        return pd.Series()

@st.cache_data
def eficiencia_operacional(df, tempo_programado):
    """Calcula a efici√™ncia operacional."""
    tempo_operacao = tempo_programado - df['Dura√ß√£o'].sum()
    eficiencia = tempo_operacao / tempo_programado * 100
    return max(0, min(100, eficiencia))

@st.cache_data
def indice_paradas_criticas(df, limite_horas=1):
    """Identifica paradas cr√≠ticas (com dura√ß√£o maior que o limite especificado)."""
    limite = pd.Timedelta(hours=limite_horas)
    paradas_criticas = df[df['Dura√ß√£o'] > limite]
    percentual_criticas = len(paradas_criticas) / len(df) * 100 if len(df) > 0 else 0
    return paradas_criticas, percentual_criticas

# ----- FUN√á√ïES DE VISUALIZA√á√ÉO -----
@st.cache_data
def criar_grafico_pareto(pareto):
    """Cria um gr√°fico de Pareto com Plotly."""
    if pareto.empty:
        return None
    
    # Converte dura√ß√µes para horas
    pareto_horas = pareto.apply(lambda x: x.total_seconds() / 3600)
    
    fig = px.bar(
        x=pareto_horas.index,
        y=pareto_horas.values,
        labels={'x': 'Causa de Parada', 'y': 'Dura√ß√£o Total (horas)'},
        title="Pareto de Causas de Paradas (Top 10 por Dura√ß√£o)",
        color_discrete_sequence=['#3498db'],
        text=pareto_horas.values.round(1)
    )
    
    fig.update_traces(
        texttemplate='%{text}h', 
        textposition='outside'
    )
    
    fig.update_layout(
        xaxis_tickangle=-45,
        autosize=True,
        margin=dict(l=50, r=50, t=80, b=100),
        plot_bgcolor='rgba(0,0,0,0)',
        yaxis_title="Dura√ß√£o Total (horas)",
        xaxis_title="Causa de Parada",
        hoverlabel=dict(
            bgcolor="white",
            font_size=12,
            font_family="Arial"
        ),
        title={
            'y':0.95,
            'x':0.5,
            'xanchor': 'center',
            'yanchor': 'top'
        }
    )
    
    return fig

@st.cache_data
def criar_grafico_pizza_areas(indice_paradas):
    """Cria um gr√°fico de pizza para √°reas respons√°veis com Plotly."""
    if indice_paradas.empty:
        return None
    
    fig = px.pie(
        values=indice_paradas.values,
        names=indice_paradas.index,
        title="√çndice de Paradas por √Årea Respons√°vel",
        color_discrete_sequence=px.colors.qualitative.Pastel,
        hole=0.4  # Cria um gr√°fico de donut para melhor visualiza√ß√£o
    )
    
    fig.update_traces(
        textposition='inside',
        textinfo='percent+label',
        marker=dict(line=dict(color='#FFFFFF', width=2)),
        pull=[0.05 if i == indice_paradas.values.argmax() else 0 for i in range(len(indice_paradas))]  # Destaca o maior valor
    )
    
    fig.update_layout(
        autosize=True,
        margin=dict(l=20, r=20, t=80, b=20),
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=-0.2,
            xanchor="center",
            x=0.5
        ),
        title={
            'y':0.95,
            'x':0.5,
            'xanchor': 'center',
            'yanchor': 'top'
        }
    )
    
    return fig

@st.cache_data
def criar_grafico_ocorrencias(ocorrencias):
    """Cria um gr√°fico de linha para ocorr√™ncias mensais com Plotly."""
    if ocorrencias.empty or len(ocorrencias) <= 1:
        return None
    
    fig = px.line(
        x=ocorrencias.index,
        y=ocorrencias.values,
        markers=True,
        labels={'x': 'M√™s', 'y': 'N√∫mero de Paradas'},
        title="Taxa de Ocorr√™ncia de Paradas por M√™s",
        color_discrete_sequence=['#2ecc71']
    )
    
    # Adiciona √°rea sob a linha para melhor visualiza√ß√£o de tend√™ncias
    fig.add_trace(
        go.Scatter(
            x=ocorrencias.index,
            y=ocorrencias.values,
            fill='tozeroy',
            fillcolor='rgba(46, 204, 113, 0.2)',
            line=dict(color='rgba(46, 204, 113, 0)'),
            showlegend=False
        )
    )
    
    # Adiciona valores acima dos pontos
    for i, v in enumerate(ocorrencias):
        fig.add_annotation(
            x=ocorrencias.index[i],
            y=v,
            text=str(v),
            showarrow=False,
            yshift=10,
            font=dict(color="#2c3e50")
        )
    
    fig.update_layout(
        xaxis_tickangle=-45,
        autosize=True,
        margin=dict(l=50, r=50, t=80, b=100),
        plot_bgcolor='rgba(0,0,0,0)',
        yaxis_title="N√∫mero de Paradas",
        xaxis_title="M√™s",
        hovermode="x unified",
        title={
            'y':0.95,
            'x':0.5,
            'xanchor': 'center',
            'yanchor': 'top'
        }
    )
    
    return fig

@st.cache_data
def criar_grafico_duracao_mensal(duracao_mensal):
    """Cria um gr√°fico de linha para dura√ß√£o total de paradas por m√™s."""
    if duracao_mensal.empty or len(duracao_mensal) <= 1:
        return None
    
    # Converte dura√ß√µes para horas
    duracao_horas = duracao_mensal.apply(lambda x: x.total_seconds() / 3600)
    
    fig = px.line(
        x=duracao_horas.index,
        y=duracao_horas.values,
        markers=True,
        labels={'x': 'M√™s', 'y': 'Dura√ß√£o Total (horas)'},
        title="Dura√ß√£o Total de Paradas por M√™s",
        color_discrete_sequence=['#e74c3c']
    )
    
    # Adiciona √°rea sob a linha para melhor visualiza√ß√£o de tend√™ncias
    fig.add_trace(
        go.Scatter(
            x=duracao_horas.index,
            y=duracao_horas.values,
            fill='tozeroy',
            fillcolor='rgba(231, 76, 60, 0.2)',
            line=dict(color='rgba(231, 76, 60, 0)'),
            showlegend=False
        )
    )
    
    # Adiciona valores acima dos pontos
    for i, v in enumerate(duracao_horas):
        fig.add_annotation(
            x=duracao_horas.index[i],
            y=v,
            text=f"{v:.1f}h",
            showarrow=False,
            yshift=10,
            font=dict(color="#2c3e50")
        )
    
    fig.update_layout(
        xaxis_tickangle=-45,
        autosize=True,
        margin=dict(l=50, r=50, t=80, b=100),
        plot_bgcolor='rgba(0,0,0,0)',
        yaxis_title="Dura√ß√£o Total (horas)",
        xaxis_title="M√™s",
        hovermode="x unified",
        title={
            'y':0.95,
            'x':0.5,
            'xanchor': 'center',
            'yanchor': 'top'
        }
    )
    
    return fig

@st.cache_data
def criar_grafico_tempo_area(tempo_area):
    """Cria um gr√°fico de barras horizontais para tempo por √°rea com Plotly."""
    if tempo_area.empty:
        return None
    
    # Converte dura√ß√µes para horas
    tempo_area_horas = tempo_area.apply(lambda x: x.total_seconds() / 3600)
    
    # Ordena os dados para melhor visualiza√ß√£o
    tempo_area_horas = tempo_area_horas.sort_values(ascending=True)
    
    fig = px.bar(
        y=tempo_area_horas.index,
        x=tempo_area_horas.values,
        orientation='h',
        labels={'y': '√Årea Respons√°vel', 'x': 'Dura√ß√£o Total (horas)'},
        title="Tempo Total de Paradas por √Årea",
        color_discrete_sequence=['#e74c3c'],
        text=tempo_area_horas.values.round(1)
    )
    
    fig.update_traces(
        texttemplate='%{text}h', 
        textposition='outside'
    )
    
    fig.update_layout(
        autosize=True,
        margin=dict(l=50, r=50, t=80, b=50),
        plot_bgcolor='rgba(0,0,0,0)',
        xaxis_title="Dura√ß√£o Total (horas)",
        yaxis_title="√Årea Respons√°vel",
        title={
            'y':0.95,
            'x':0.5,
            'xanchor': 'center',
            'yanchor': 'top'
        }
    )
    
    return fig

@st.cache_data
def criar_grafico_paradas_criticas(top_criticas):
    """Cria um gr√°fico de barras horizontais para paradas cr√≠ticas com Plotly."""
    if top_criticas.empty:
        return None
    
    # Converte dura√ß√µes para horas
    top_criticas_horas = top_criticas.apply(lambda x: x.total_seconds() / 3600)
    
    # Ordena os dados para melhor visualiza√ß√£o
    top_criticas_horas = top_criticas_horas.sort_values(ascending=True)
    
    fig = px.bar(
        y=top_criticas_horas.index,
        x=top_criticas_horas.values,
        orientation='h',
        labels={'y': 'Tipo de Parada', 'x': 'Dura√ß√£o Total (horas)'},
        title="Top 10 Paradas Cr√≠ticas (>1h)",
        color_discrete_sequence=['#9b59b6'],
        text=top_criticas_horas.values.round(1)
    )
    
    fig.update_traces(
        texttemplate='%{text}h', 
        textposition='outside'
    )
    
    fig.update_layout(
        autosize=True,
        margin=dict(l=50, r=50, t=80, b=50),
        plot_bgcolor='rgba(0,0,0,0)',
        xaxis_title="Dura√ß√£o Total (horas)",
        yaxis_title="Tipo de Parada",
        title={
            'y':0.95,
            'x':0.5,
            'xanchor': 'center',
            'yanchor': 'top'
        }
    )
    
    return fig

@st.cache_data
def criar_grafico_pizza_areas_criticas(paradas_criticas):
    """Cria um gr√°fico de pizza para √°reas respons√°veis por paradas cr√≠ticas."""
    if '√Årea Respons√°vel' not in paradas_criticas.columns or paradas_criticas.empty:
        return None
    
    areas_criticas = paradas_criticas['√Årea Respons√°vel'].value_counts()
    
    fig = px.pie(
        values=areas_criticas.values,
        names=areas_criticas.index,
        title="Distribui√ß√£o de Paradas Cr√≠ticas por √Årea",
        color_discrete_sequence=px.colors.qualitative.Bold,
        hole=0.4  # Cria um gr√°fico de donut para melhor visualiza√ß√£o
    )
    
    fig.update_traces(
        textposition='inside',
        textinfo='percent+label',
        marker=dict(line=dict(color='#FFFFFF', width=2))
    )
    
    fig.update_layout(
        autosize=True,
        margin=dict(l=20, r=20, t=80, b=20),
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=-0.2,
            xanchor="center",
            x=0.5
        ),
        title={
            'y':0.95,
            'x':0.5,
            'xanchor': 'center',
            'yanchor': 'top'
        }
    )
    
    return fig

@st.cache_data
def criar_grafico_distribuicao_duracao(df):
    """Cria um histograma da distribui√ß√£o de dura√ß√£o das paradas."""
    if df.empty:
        return None
    
    # Converte dura√ß√µes para minutos para melhor visualiza√ß√£o
    duracoes_minutos = df['Dura√ß√£o'].apply(lambda x: x.total_seconds() / 60)
    
    fig = px.histogram(
        x=duracoes_minutos,
        nbins=20,
        labels={'x': 'Dura√ß√£o (minutos)', 'y': 'Frequ√™ncia'},
        title="Distribui√ß√£o da Dura√ß√£o das Paradas",
        color_discrete_sequence=['#1abc9c']
    )
    
    fig.update_layout(
        autosize=True,
        margin=dict(l=50, r=50, t=80, b=50),
        plot_bgcolor='rgba(0,0,0,0)',
        xaxis_title="Dura√ß√£o (minutos)",
        yaxis_title="Frequ√™ncia",
        bargap=0.1,
        title={
            'y':0.95,
            'x':0.5,
            'xanchor': 'center',
            'yanchor': 'top'
        }
    )
    
    return fig

# ----- FUN√á√ïES DE AN√ÅLISE E RELAT√ìRIO -----
@st.cache_data
def gerar_recomendacoes(df, disponibilidade, eficiencia):
    """Gera recomenda√ß√µes autom√°ticas com base nos dados analisados."""
    recomendacoes = []
    
    # Verifica a disponibilidade
    if disponibilidade < 70:
        recomendacoes.append("‚ö†Ô∏è A disponibilidade est√° abaixo do n√≠vel recomendado (70%). Priorize a redu√ß√£o do tempo de paradas n√£o programadas.")
    elif disponibilidade < 85:
        recomendacoes.append("‚ö†Ô∏è A disponibilidade est√° em n√≠vel moderado. Considere implementar melhorias no processo de manuten√ß√£o preventiva.")
    else:
        recomendacoes.append("‚úÖ A disponibilidade est√° em um bom n√≠vel. Continue monitorando para manter este desempenho.")
    
    # Verifica a efici√™ncia
    if eficiencia < 65:
        recomendacoes.append("‚ö†Ô∏è A efici√™ncia operacional est√° baixa. Analise as causas mais frequentes de paradas e implemente a√ß√µes corretivas.")
    elif eficiencia < 80:
        recomendacoes.append("‚ö†Ô∏è A efici√™ncia operacional est√° em n√≠vel moderado. Busque otimizar os processos para reduzir o tempo de paradas.")
    else:
        recomendacoes.append("‚úÖ A efici√™ncia operacional est√° em um bom n√≠vel. Continue com as pr√°ticas atuais de manuten√ß√£o.")
    
    # An√°lise das paradas cr√≠ticas
    paradas_criticas, percentual_criticas = indice_paradas_criticas(df)
    if percentual_criticas > 20:
        recomendacoes.append(f"‚ö†Ô∏è Alta incid√™ncia de paradas cr√≠ticas ({percentual_criticas:.1f}%). Revise os procedimentos de manuten√ß√£o corretiva.")
    elif percentual_criticas > 10:
        recomendacoes.append(f"‚ö†Ô∏è Incid√™ncia moderada de paradas cr√≠ticas ({percentual_criticas:.1f}%). Implemente um plano de a√ß√£o para reduzir este √≠ndice.")
    else:
        recomendacoes.append(f"‚úÖ Baixa incid√™ncia de paradas cr√≠ticas ({percentual_criticas:.1f}%). Continue monitorando para manter este desempenho.")
    
    # An√°lise de √°reas respons√°veis
    if '√Årea Respons√°vel' in df.columns:
        areas = indice_paradas_por_area(df)
        if not areas.empty:
            area_mais_problematica = areas.idxmax()
            percentual_area = areas.max()
            if percentual_area > 40:
                recomendacoes.append(f"‚ö†Ô∏è A √°rea de {area_mais_problematica} √© respons√°vel por {percentual_area:.1f}% das paradas. Priorize a√ß√µes nesta √°rea.")
    
    # An√°lise de tend√™ncia
    ocorrencias = taxa_ocorrencia_paradas(df)
    if len(ocorrencias) >= 3:
        tendencia = ocorrencias.iloc[-1] - ocorrencias.iloc[0]
        if tendencia > 0:
            recomendacoes.append("‚ö†Ô∏è Tend√™ncia de aumento no n√∫mero de paradas. Revise os procedimentos de manuten√ß√£o preventiva.")
        elif tendencia < 0:
            recomendacoes.append("‚úÖ Tend√™ncia de redu√ß√£o no n√∫mero de paradas. Continue com as melhorias implementadas.")
    
    return recomendacoes

@st.cache_data
def get_download_link(df, filename, text):
    """Gera um link para download de um DataFrame como arquivo Excel."""
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, sheet_name='Dados', index=True)
    
    b64 = base64.b64encode(output.getvalue()).decode()
    href = f'<a href="data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{b64}" download="{filename}">{text}</a>'
    return href

# ----- FUN√á√ÉO PRINCIPAL DE AN√ÅLISE -----
def analisar_dados(df, maquina_selecionada, mes_selecionado):
    """Realiza a an√°lise completa dos dados com base nos filtros selecionados."""
    # Filtra os dados conforme sele√ß√£o
    dados_filtrados = df.copy()
    
    if maquina_selecionada != "Todas":
        dados_filtrados = dados_filtrados[dados_filtrados['M√°quina'] == maquina_selecionada]
    
    if mes_selecionado != "Todos":
        dados_filtrados = dados_filtrados[dados_filtrados['Ano-M√™s'] == mes_selecionado]
    
    # Define o tempo programado (24 horas por dia * n√∫mero de dias no per√≠odo)
    if mes_selecionado != "Todos":
        # Obt√©m o n√∫mero de dias no m√™s selecionado
        ano, mes = map(int, mes_selecionado.split('-'))
        dias_no_mes = pd.Period(f"{ano}-{mes}").days_in_month
    else:
        # Se todos os meses estiverem selecionados, usa o intervalo total dos dados
        dias_no_mes = (dados_filtrados['Inicio'].max() - dados_filtrados['Inicio'].min()).days + 1
        dias_no_mes = max(30, dias_no_mes)  # Usa pelo menos 30 dias para evitar divis√£o por zero
    
    # Tempo programado em horas (24 horas por dia)
    tempo_programado_horas = dias_no_mes * 24
    tempo_programado = pd.Timedelta(hours=tempo_programado_horas)
    
    # Calcula os indicadores
    disponibilidade = calcular_disponibilidade(dados_filtrados, tempo_programado)
    eficiencia = eficiencia_operacional(dados_filtrados, tempo_programado)
    tempo_medio = tempo_medio_paradas(dados_filtrados)
    
    # Calcula o tempo total de paradas em horas
    tempo_total_paradas = dados_filtrados['Dura√ß√£o'].sum()
    tempo_total_paradas_horas = tempo_total_paradas.total_seconds() / 3600
    
    # Calcula o n√∫mero total de paradas
    total_paradas = len(dados_filtrados)
    
    # Calcula o MTBF (Mean Time Between Failures) em horas
    if total_paradas > 1:
        mtbf = (tempo_programado - tempo_total_paradas).total_seconds() / 3600 / total_paradas
    else:
        mtbf = 0
    
    # Calcula o MTTR (Mean Time To Repair) em horas
    if total_paradas > 0:
        mttr = tempo_total_paradas.total_seconds() / 3600 / total_paradas
    else:
        mttr = 0
    
    # Gera recomenda√ß√µes
    recomendacoes = gerar_recomendacoes(dados_filtrados, disponibilidade, eficiencia)
    
    # An√°lises adicionais
    indice_paradas = indice_paradas_por_area(dados_filtrados)
    pareto = pareto_causas_parada(dados_filtrados)
    ocorrencias = taxa_ocorrencia_paradas(dados_filtrados)
    tempo_area = tempo_total_paradas_area(dados_filtrados)
    
    # An√°lise de paradas cr√≠ticas
    paradas_criticas, percentual_criticas = indice_paradas_criticas(dados_filtrados)
    top_paradas_criticas = paradas_criticas.groupby('Parada')['Dura√ß√£o'].sum().sort_values(ascending=False).head(10)
    
    # Novas an√°lises
    paradas_frequentes = paradas_mais_frequentes(dados_filtrados)
    duracao_mensal = duracao_total_por_mes(dados_filtrados)
    
    # Armazena os resultados na sess√£o
    st.session_state.resultados = {
        'disponibilidade': disponibilidade,
        'eficiencia': eficiencia,
        'tempo_medio': tempo_medio,
        'tempo_total_paradas': tempo_total_paradas,
        'tempo_total_paradas_horas': tempo_total_paradas_horas,
        'total_paradas': total_paradas,
        'mtbf': mtbf,
        'mttr': mttr,
        'indice_paradas': indice_paradas,
        'pareto': pareto,
        'ocorrencias': ocorrencias,
        'tempo_area': tempo_area,
        'paradas_criticas': paradas_criticas,
        'percentual_criticas': percentual_criticas,
        'top_paradas_criticas': top_paradas_criticas,
        'recomendacoes': recomendacoes,
        'maquina_selecionada': maquina_selecionada,
        'mes_selecionado': mes_selecionado,
        'tempo_programado_horas': tempo_programado_horas,
        'paradas_frequentes': paradas_frequentes,
        'duracao_mensal': duracao_mensal
    }
    
    return st.session_state.resultados

# ----- FUN√á√ÉO PRINCIPAL DA APLICA√á√ÉO -----
def main():
    """Fun√ß√£o principal que controla o fluxo da aplica√ß√£o."""
    # Inicializa a sess√£o se necess√°rio
    if 'df' not in st.session_state:
        st.session_state.df = None
    
    if 'resultados' not in st.session_state:
        st.session_state.resultados = None
    
    if 'first_load' not in st.session_state:
        st.session_state.first_load = False
    
    # Menu de navega√ß√£o
    selected = option_menu(
        menu_title=None,
        options=["Dashboard", "Dados", "Sobre"],
        icons=["speedometer2", "table", "info-circle"],
        menu_icon="cast",
        default_index=0,
        orientation="horizontal",
        styles={
            "container": {"padding": "0!important", "background-color": "#f8f9fa", "border-radius": "10px", "margin-bottom": "20px"},
            "icon": {"color": "#3498db", "font-size": "14px"},
            "nav-link": {"font-size": "14px", "text-align": "center", "margin": "0px", "--hover-color": "#eee"},
            "nav-link-selected": {"background-color": "#3498db", "color": "white"},
        }
    )
    
    # Espa√ßo para logo da empresa
    with st.container():
        st.markdown('<div class="logo-container">', unsafe_allow_html=True)
        # Logo da Britvic
        logo_url = "https://raw.githubusercontent.com/martins6231/app_atd/main/britvic_logo.png"
        st.image(logo_url, width=200, output_format="PNG", use_container_width=False)
        st.markdown('</div>', unsafe_allow_html=True)
    
    # T√≠tulo principal
    st.markdown('<div class="main-title">An√°lise de Efici√™ncia de M√°quinas</div>', unsafe_allow_html=True)
    
    if selected == "Dashboard":
        # Se√ß√£o de upload de arquivo
        with st.container():
            st.markdown('<div class="content-box">', unsafe_allow_html=True)
            st.markdown("### üì§ Upload de Dados")
            
            uploaded_file = st.file_uploader("Selecione um arquivo Excel com os dados de paradas", type=["xlsx", "xls"])
            
            if uploaded_file is not None:
                try:
                    df = pd.read_excel(uploaded_file)
                    st.session_state.df = processar_dados(df)
                    st.success(f"‚úÖ Arquivo carregado com sucesso! {len(st.session_state.df)} registros processados.")
                except Exception as e:
                    st.error(f"‚ùå Erro ao processar o arquivo: {str(e)}")
            st.markdown('</div>', unsafe_allow_html=True)
        
        # Se houver dados carregados, exibe os filtros e a an√°lise
        if st.session_state.df is not None:
            with st.container():
                st.markdown('<div class="content-box">', unsafe_allow_html=True)
                st.markdown("### üîç Filtros de An√°lise")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    # Filtro de m√°quina
                    maquinas_disponiveis = ["Todas"] + sorted(st.session_state.df['M√°quina'].unique().tolist())
                    maquina_selecionada = st.selectbox("Selecione a M√°quina:", maquinas_disponiveis)
                
                with col2:
                    # Filtro de m√™s
                    meses_disponiveis = ["Todos"] + sorted(st.session_state.df['Ano-M√™s'].unique().tolist())
                    mes_selecionado = st.selectbox("Selecione o M√™s:", meses_disponiveis)
                
                # Bot√£o para analisar
                if st.button("Analisar", key="btn_analisar"):
                    with st.spinner("Analisando dados..."):
                        analisar_dados(st.session_state.df, maquina_selecionada, mes_selecionado)
                st.markdown('</div>', unsafe_allow_html=True)
            
            # Exibe os resultados se dispon√≠veis
            if st.session_state.resultados:
                # Extrai os resultados da sess√£o
                resultados = st.session_state.resultados
                
                # T√≠tulo da se√ß√£o de resultados
                maquina_texto = resultados['maquina_selecionada']
                mes_texto = obter_nome_mes(resultados['mes_selecionado'])
                
                st.markdown(f'<div class="section-title">Resultados da An√°lise: {maquina_texto} - {mes_texto}</div>', unsafe_allow_html=True)
                
                # Indicadores principais
                st.markdown('<div class="metrics-container">', unsafe_allow_html=True)
                
                # Disponibilidade
                st.markdown(
                    f"""
                    <div class="metric-box">
                        <div class="metric-value">{resultados['disponibilidade']:.1f}%</div>
                        <div class="metric-label">Disponibilidade</div>
                    </div>
                    """, 
                    unsafe_allow_html=True
                )
                
                # Efici√™ncia
                st.markdown(
                    f"""
                    <div class="metric-box">
                        <div class="metric-value">{resultados['eficiencia']:.1f}%</div>
                        <div class="metric-label">Efici√™ncia Operacional</div>
                    </div>
                    """, 
                    unsafe_allow_html=True
                )
                
                # MTBF
                st.markdown(
                    f"""
                    <div class="metric-box">
                        <div class="metric-value">{resultados['mtbf']:.1f}h</div>
                        <div class="metric-label">MTBF</div>
                    </div>
                    """, 
                    unsafe_allow_html=True
                )
                
                # MTTR
                st.markdown(
                    f"""
                    <div class="metric-box">
                        <div class="metric-value">{resultados['mttr']:.1f}h</div>
                        <div class="metric-label">MTTR</div>
                    </div>
                    """, 
                    unsafe_allow_html=True
                )
                
                st.markdown('</div>', unsafe_allow_html=True)
                
                # Resumo dos dados analisados
                with st.container():
                    st.markdown('<div class="content-box">', unsafe_allow_html=True)
                    st.markdown("### üìä Resumo da An√°lise")
                    
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.markdown(f"**Per√≠odo Analisado:** {mes_texto}")
                        st.markdown(f"**M√°quina:** {maquina_texto}")
                        st.markdown(f"**Tempo Programado:** {resultados['tempo_programado_horas']:.1f} horas")
                    
                    with col2:
                        st.markdown(f"**Total de Paradas:** {resultados['total_paradas']} ocorr√™ncias")
                        st.markdown(f"**Tempo Total de Paradas:** {resultados['tempo_total_paradas_horas']:.1f} horas")
                        st.markdown(f"**Tempo M√©dio por Parada:** {resultados['tempo_medio'].total_seconds() / 60:.1f} minutos")
                    
                    st.markdown('</div>', unsafe_allow_html=True)
                
                # Tabelas de Resumo
                st.markdown('<div class="section-title">Tabelas de Resumo</div>', unsafe_allow_html=True)
                
                # Duas colunas para as tabelas
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown('<div class="content-box">', unsafe_allow_html=True)
                    st.markdown("### üìã Top 10 Paradas Mais Frequentes")
                    
                    if not resultados['paradas_frequentes'].empty:
                        # Cria um DataFrame para melhor formata√ß√£o
                        df_frequentes = pd.DataFrame({
                            'Tipo de Parada': resultados['paradas_frequentes'].index,
                            'N√∫mero de Ocorr√™ncias': resultados['paradas_frequentes'].values
                        })
                        
                        st.dataframe(
                            df_frequentes,
                            column_config={
                                "Tipo de Parada": st.column_config.TextColumn("Tipo de Parada"),
                                "N√∫mero de Ocorr√™ncias": st.column_config.NumberColumn("N√∫mero de Ocorr√™ncias", format="%d")
                            },
                            use_container_width=True,
                            hide_index=True
                        )
                    else:
                        st.info("Dados insuficientes para an√°lise de paradas frequentes.")
                    
                    st.markdown('</div>', unsafe_allow_html=True)
                
                with col2:
                    st.markdown('<div class="content-box">', unsafe_allow_html=True)
                    st.markdown("### ‚è±Ô∏è Top 10 Paradas Mais Longas")
                    
                    if not resultados['pareto'].empty:
                        # Converte dura√ß√µes para horas
                        pareto_horas = resultados['pareto'].apply(lambda x: x.total_seconds() / 3600)
                        
                        # Cria um DataFrame para melhor formata√ß√£o
                        df_longas = pd.DataFrame({
                            'Tipo de Parada': pareto_horas.index,
                            'Dura√ß√£o Total (horas)': pareto_horas.values
                        })
                        
                        st.dataframe(
                            df_longas,
                            column_config={
                                "Tipo de Parada": st.column_config.TextColumn("Tipo de Parada"),
                                "Dura√ß√£o Total (horas)": st.column_config.NumberColumn("Dura√ß√£o Total (horas)", format="%.2f")
                            },
                            use_container_width=True,
                            hide_index=True
                        )
                    else:
                        st.info("Dados insuficientes para an√°lise de paradas longas.")
                    
                    st.markdown('</div>', unsafe_allow_html=True)
                
                # An√°lise Temporal
                st.markdown('<div class="section-title">An√°lise Temporal</div>', unsafe_allow_html=True)
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
                    fig_ocorrencias = criar_grafico_ocorrencias(resultados['ocorrencias'])
                    if fig_ocorrencias:
                        st.plotly_chart(fig_ocorrencias, use_container_width=True)
                    else:
                        st.info("Dados insuficientes para an√°lise de tend√™ncia mensal.")
                    st.markdown('</div>', unsafe_allow_html=True)
                
                with col2:
                    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
                    fig_duracao_mensal = criar_grafico_duracao_mensal(resultados['duracao_mensal'])
                    if fig_duracao_mensal:
                        st.plotly_chart(fig_duracao_mensal, use_container_width=True)
                    else:
                        st.info("Dados insuficientes para an√°lise de dura√ß√£o mensal.")
                    st.markdown('</div>', unsafe_allow_html=True)
                
                # An√°lise Gr√°fica
                st.markdown('<div class="section-title">An√°lise Gr√°fica</div>', unsafe_allow_html=True)
                
                # Gr√°ficos em duas colunas
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
                    fig_pareto = criar_grafico_pareto(resultados['pareto'])
                    if fig_pareto:
                        st.plotly_chart(fig_pareto, use_container_width=True)
                    else:
                        st.info("Dados insuficientes para gr√°fico de Pareto.")
                    st.markdown('</div>', unsafe_allow_html=True)
                
                with col2:
                    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
                    fig_area = criar_grafico_pizza_areas(resultados['indice_paradas'])
                    if fig_area:
                        st.plotly_chart(fig_area, use_container_width=True)
                    else:
                        st.info("Nenhuma parada por √°rea dispon√≠vel.")
                    st.markdown('</div>', unsafe_allow_html=True)
                
                # Segunda linha de gr√°ficos
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
                    fig_tempo_area = criar_grafico_tempo_area(resultados['tempo_area'])
                    if fig_tempo_area:
                        st.plotly_chart(fig_tempo_area, use_container_width=True)
                    else:
                        st.info("Nenhum dado de tempo por √°rea dispon√≠vel.")
                    st.markdown('</div>', unsafe_allow_html=True)
                
                with col2:
                    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
                    fig_distribuicao = criar_grafico_distribuicao_duracao(resultados['paradas_criticas'])
                    if fig_distribuicao:
                        st.plotly_chart(fig_distribuicao, use_container_width=True)
                    else:
                        st.info("Dados insuficientes para an√°lise de distribui√ß√£o.")
                    st.markdown('</div>', unsafe_allow_html=True)
                
                # An√°lise de Paradas Cr√≠ticas
                st.markdown('<div class="section-title">An√°lise de Paradas Cr√≠ticas</div>', unsafe_allow_html=True)
                
                # Gr√°ficos em duas colunas
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
                    fig_paradas_criticas = criar_grafico_paradas_criticas(resultados['top_paradas_criticas'])
                    if fig_paradas_criticas:
                        st.plotly_chart(fig_paradas_criticas, use_container_width=True)
                    else:
                        st.info("Nenhuma parada cr√≠tica identificada.")
                    st.markdown('</div>', unsafe_allow_html=True)
                
                with col2:
                    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
                    fig_areas_criticas = criar_grafico_pizza_areas_criticas(resultados['paradas_criticas'])
                    if fig_areas_criticas:
                        st.plotly_chart(fig_areas_criticas, use_container_width=True)
                    else:
                        st.info("Nenhuma parada cr√≠tica por √°rea dispon√≠vel.")
                    st.markdown('</div>', unsafe_allow_html=True)
                
                # Recomenda√ß√µes
                st.markdown('<div class="section-title">Recomenda√ß√µes</div>', unsafe_allow_html=True)
                
                with st.container():
                    st.markdown('<div class="content-box">', unsafe_allow_html=True)
                    st.markdown("### üí° Insights e A√ß√µes Recomendadas")
                    
                    for rec in resultados['recomendacoes']:
                        st.markdown(f"- {rec}")
                    
                    st.markdown('</div>', unsafe_allow_html=True)
                
                # Exporta√ß√£o de dados
                with st.container():
                    st.markdown('<div class="content-box">', unsafe_allow_html=True)
                    st.markdown("### üì• Exportar Resultados")
                    
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        # Exportar dados filtrados
                        dados_filtrados = st.session_state.df.copy()
                        if resultados['maquina_selecionada'] != "Todas":
                            dados_filtrados = dados_filtrados[dados_filtrados['M√°quina'] == resultados['maquina_selecionada']]
                        if resultados['mes_selecionado'] != "Todos":
                            dados_filtrados = dados_filtrados[dados_filtrados['Ano-M√™s'] == resultados['mes_selecionado']]
                        
                        st.markdown(
                            get_download_link(dados_filtrados, 'dados_analisados.xlsx', 'üì• Baixar dados analisados'),
                            unsafe_allow_html=True
                        )
                    
                    with col2:
                        # Exportar paradas cr√≠ticas
                        if not resultados['paradas_criticas'].empty:
                            st.markdown(
                                get_download_link(resultados['paradas_criticas'], 'paradas_criticas.xlsx', 'üì• Baixar paradas cr√≠ticas'),
                                unsafe_allow_html=True
                            )
                    
                    st.markdown('</div>', unsafe_allow_html=True)
            
            # Bot√£o para limpar os dados
            with st.container():
                if st.button("Limpar Dados", key="btn_limpar"):
                    st.session_state.resultados = None
                    st.session_state.df = None
                    st.rerun()
            
            # Realiza a an√°lise com os filtros padr√£o na primeira carga
            if not st.session_state.first_load and st.session_state.df is not None:
                st.session_state.first_load = True
                analisar_dados(st.session_state.df, "Todas", "Todos")
    
    elif selected == "Dados":
        if st.session_state.df is not None:
            st.markdown('<div class="section-title">Visualiza√ß√£o dos Dados</div>', unsafe_allow_html=True)
            
            with st.container():
                st.markdown('<div class="content-box">', unsafe_allow_html=True)
                # Op√ß√µes de filtro para visualiza√ß√£o
                col1, col2 = st.columns(2)
                
                with col1:
                    # Filtro de m√°quina
                    maquinas_para_filtro = ["Todas"] + sorted(st.session_state.df['M√°quina'].unique().tolist())
                    maquina_filtro = st.selectbox("Filtrar por M√°quina:", maquinas_para_filtro)
                
                with col2:
                    # Filtro de m√™s
                    meses_para_filtro = ["Todos"] + sorted(st.session_state.df['Ano-M√™s'].unique().tolist())
                    mes_filtro = st.selectbox("Filtrar por M√™s:", meses_para_filtro)
                
                # Aplica os filtros
                dados_filtrados = st.session_state.df.copy()
                
                if maquina_filtro != "Todas":
                    dados_filtrados = dados_filtrados[dados_filtrados['M√°quina'] == maquina_filtro]
                
                if mes_filtro != "Todos":
                    dados_filtrados = dados_filtrados[dados_filtrados['Ano-M√™s'] == mes_filtro]
                
                # Exibe os dados filtrados
                st.markdown(f"**Mostrando {len(dados_filtrados)} registros**")
                st.dataframe(
                    dados_filtrados,
                    use_container_width=True,
                    hide_index=True,
                    height=400
                )
                
                # Bot√£o para download dos dados
                                st.markdown(
                    get_download_link(dados_filtrados, 'dados_filtrados.xlsx', 'üì• Baixar dados filtrados'),
                    unsafe_allow_html=True
                )
                st.markdown('</div>', unsafe_allow_html=True)
            
            # Estat√≠sticas b√°sicas
            st.markdown('<div class="section-title">Estat√≠sticas B√°sicas</div>', unsafe_allow_html=True)
            
            with st.container():
                st.markdown('<div class="content-box">', unsafe_allow_html=True)
                # Resumo por m√°quina
                resumo_maquina = dados_filtrados.groupby('M√°quina').agg({
                    'Dura√ß√£o': ['count', 'sum', 'mean']
                })
                resumo_maquina.columns = ['N√∫mero de Paradas', 'Dura√ß√£o Total', 'Dura√ß√£o M√©dia']
                
                # Converte para horas
                resumo_maquina['Dura√ß√£o Total (horas)'] = resumo_maquina['Dura√ß√£o Total'].apply(lambda x: x.total_seconds() / 3600)
                resumo_maquina['Dura√ß√£o M√©dia (horas)'] = resumo_maquina['Dura√ß√£o M√©dia'].apply(lambda x: x.total_seconds() / 3600)
                
                st.dataframe(
                    resumo_maquina[['N√∫mero de Paradas', 'Dura√ß√£o Total (horas)', 'Dura√ß√£o M√©dia (horas)']],
                    column_config={
                        "N√∫mero de Paradas": st.column_config.NumberColumn("N√∫mero de Paradas", format="%d"),
                        "Dura√ß√£o Total (horas)": st.column_config.NumberColumn("Dura√ß√£o Total (horas)", format="%.2f"),
                        "Dura√ß√£o M√©dia (horas)": st.column_config.NumberColumn("Dura√ß√£o M√©dia (horas)", format="%.2f")
                    },
                    use_container_width=True
                )
                
                # Gr√°fico de resumo por m√°quina
                if len(resumo_maquina) > 1:  # S√≥ cria o gr√°fico se houver mais de uma m√°quina
                    fig_resumo = px.bar(
                        resumo_maquina.reset_index(),
                        x='M√°quina',
                        y='Dura√ß√£o Total (horas)',
                        color='M√°quina',
                        title="Dura√ß√£o Total de Paradas por M√°quina",
                        labels={'Dura√ß√£o Total (horas)': 'Dura√ß√£o Total (horas)', 'M√°quina': 'M√°quina'},
                        text='Dura√ß√£o Total (horas)'
                    )
                    
                    fig_resumo.update_traces(
                        texttemplate='%{text:.1f}h', 
                        textposition='outside'
                    )
                    
                    fig_resumo.update_layout(
                        xaxis_tickangle=0,
                        autosize=True,
                        margin=dict(l=50, r=50, t=80, b=50),
                        plot_bgcolor='rgba(0,0,0,0)',
                        showlegend=False
                    )
                    
                    st.plotly_chart(fig_resumo, use_container_width=True)
                
                # Bot√£o para download do resumo
                st.markdown(
                    get_download_link(resumo_maquina.reset_index(), 'resumo_maquinas.xlsx', 'üì• Baixar resumo por m√°quina'),
                    unsafe_allow_html=True
                )
                st.markdown('</div>', unsafe_allow_html=True)
            
            # Distribui√ß√£o de paradas por dia da semana
            st.markdown('<div class="section-title">An√°lises Adicionais</div>', unsafe_allow_html=True)
            
            with st.container():
                st.markdown('<div class="content-box">', unsafe_allow_html=True)
                
                tab1, tab2 = st.tabs(["üìÖ Distribui√ß√£o por Dia da Semana", "üïí Distribui√ß√£o por Hora do Dia"])
                
                with tab1:
                    # Adiciona coluna de dia da semana
                    dados_filtrados['Dia da Semana'] = dados_filtrados['Inicio'].dt.day_name()
                    
                    # Ordem dos dias da semana
                    ordem_dias = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
                    nomes_dias_pt = ['Segunda', 'Ter√ßa', 'Quarta', 'Quinta', 'Sexta', 'S√°bado', 'Domingo']
                    
                    # Mapeamento para nomes em portugu√™s
                    mapeamento_dias = dict(zip(ordem_dias, nomes_dias_pt))
                    dados_filtrados['Dia da Semana PT'] = dados_filtrados['Dia da Semana'].map(mapeamento_dias)
                    
                    # Agrupa por dia da semana
                    paradas_por_dia = dados_filtrados.groupby('Dia da Semana PT').agg({
                        'Dura√ß√£o': ['count', 'sum']
                    })
                    paradas_por_dia.columns = ['N√∫mero de Paradas', 'Dura√ß√£o Total']
                    
                    # Converte para horas
                    paradas_por_dia['Dura√ß√£o (horas)'] = paradas_por_dia['Dura√ß√£o Total'].apply(lambda x: x.total_seconds() / 3600)
                    
                    # Reordena o √≠ndice de acordo com os dias da semana
                    if not paradas_por_dia.empty:
                        paradas_por_dia = paradas_por_dia.reindex(nomes_dias_pt)
                        
                        # Cria o gr√°fico
                        fig_dias = px.bar(
                            paradas_por_dia.reset_index(),
                            x='Dia da Semana PT',
                            y='N√∫mero de Paradas',
                            title="Distribui√ß√£o de Paradas por Dia da Semana",
                            labels={'N√∫mero de Paradas': 'N√∫mero de Paradas', 'Dia da Semana PT': 'Dia da Semana'},
                            text='N√∫mero de Paradas',
                            color='Dia da Semana PT',
                            color_discrete_sequence=px.colors.qualitative.Pastel
                        )
                        
                        fig_dias.update_traces(
                            texttemplate='%{text}', 
                            textposition='outside'
                        )
                        
                        fig_dias.update_layout(
                            xaxis_tickangle=0,
                            autosize=True,
                            margin=dict(l=50, r=50, t=80, b=50),
                            plot_bgcolor='rgba(0,0,0,0)',
                            showlegend=False
                        )
                        
                        st.plotly_chart(fig_dias, use_container_width=True)
                        
                        # Exibe a tabela
                        st.dataframe(
                            paradas_por_dia[['N√∫mero de Paradas', 'Dura√ß√£o (horas)']],
                            column_config={
                                "N√∫mero de Paradas": st.column_config.NumberColumn("N√∫mero de Paradas", format="%d"),
                                "Dura√ß√£o (horas)": st.column_config.NumberColumn("Dura√ß√£o (horas)", format="%.2f")
                            },
                            use_container_width=True
                        )
                    else:
                        st.info("Dados insuficientes para an√°lise por dia da semana.")
                
                with tab2:
                    # Adiciona coluna de hora do dia
                    dados_filtrados['Hora do Dia'] = dados_filtrados['Inicio'].dt.hour
                    
                    # Agrupa por hora do dia
                    paradas_por_hora = dados_filtrados.groupby('Hora do Dia').agg({
                        'Dura√ß√£o': ['count', 'sum']
                    })
                    paradas_por_hora.columns = ['N√∫mero de Paradas', 'Dura√ß√£o Total']
                    
                    # Converte para horas
                    paradas_por_hora['Dura√ß√£o (horas)'] = paradas_por_hora['Dura√ß√£o Total'].apply(lambda x: x.total_seconds() / 3600)
                    
                    # Cria o gr√°fico
                    if not paradas_por_hora.empty:
                        fig_horas = px.line(
                            paradas_por_hora.reset_index(),
                            x='Hora do Dia',
                            y='N√∫mero de Paradas',
                            title="Distribui√ß√£o de Paradas por Hora do Dia",
                            labels={'N√∫mero de Paradas': 'N√∫mero de Paradas', 'Hora do Dia': 'Hora do Dia'},
                            markers=True
                        )
                        
                        # Adiciona √°rea sob a linha
                        fig_horas.add_trace(
                            go.Scatter(
                                x=paradas_por_hora.reset_index()['Hora do Dia'],
                                y=paradas_por_hora['N√∫mero de Paradas'],
                                fill='tozeroy',
                                fillcolor='rgba(52, 152, 219, 0.2)',
                                line=dict(color='rgba(52, 152, 219, 0)'),
                                showlegend=False
                            )
                        )
                        
                        fig_horas.update_layout(
                            xaxis=dict(
                                tickmode='array',
                                tickvals=list(range(0, 24)),
                                ticktext=[f"{h}:00" for h in range(0, 24)]
                            ),
                            autosize=True,
                            margin=dict(l=50, r=50, t=80, b=50),
                            plot_bgcolor='rgba(0,0,0,0)',
                            showlegend=False
                        )
                        
                        st.plotly_chart(fig_horas, use_container_width=True)
                        
                        # Exibe a tabela
                        st.dataframe(
                            paradas_por_hora[['N√∫mero de Paradas', 'Dura√ß√£o (horas)']],
                            column_config={
                                "N√∫mero de Paradas": st.column_config.NumberColumn("N√∫mero de Paradas", format="%d"),
                                "Dura√ß√£o (horas)": st.column_config.NumberColumn("Dura√ß√£o (horas)", format="%.2f")
                            },
                            use_container_width=True
                        )
                    else:
                        st.info("Dados insuficientes para an√°lise por hora do dia.")
                
                st.markdown('</div>', unsafe_allow_html=True)
        else:
            st.warning("‚ö†Ô∏è Nenhum dado foi carregado. Por favor, v√° para a p√°gina 'Dashboard' e fa√ßa o upload de um arquivo Excel.")
    
    elif selected == "Sobre":
        st.markdown('<div class="section-title">Sobre a Aplica√ß√£o</div>', unsafe_allow_html=True)
        
        with st.container():
            st.markdown('<div class="content-box">', unsafe_allow_html=True)
            col1, col2 = st.columns([1, 2])
            
            with col1:
                st.image("https://img.icons8.com/fluency/240/factory.png", width=150)
            
            with col2:
                st.markdown("""
                # An√°lise de Efici√™ncia de M√°quinas
                
                Esta aplica√ß√£o foi desenvolvida para analisar dados de paradas de m√°quinas e calcular indicadores de efici√™ncia, 
                fornecendo insights valiosos para melhorar a produtividade e reduzir o tempo de inatividade.
                """)
            st.markdown('</div>', unsafe_allow_html=True)
        
        # Funcionalidades
        with st.container():
            st.markdown('<div class="content-box">', unsafe_allow_html=True)
            st.markdown("## ‚ú® Funcionalidades")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("""
                ### üìä An√°lise de Dados
                - Visualiza√ß√£o de indicadores de disponibilidade e efici√™ncia
                - Identifica√ß√£o das principais causas de paradas
                - An√°lise da distribui√ß√£o de paradas por √°rea respons√°vel
                - Acompanhamento da evolu√ß√£o das paradas ao longo do tempo
                """)
            
            with col2:
                st.markdown("""
                ### üîç Recursos Adicionais
                - Filtragem por m√°quina e per√≠odo
                - Exporta√ß√£o de dados para an√°lise detalhada
                - Visualiza√ß√µes interativas e responsivas
                - Recomenda√ß√µes autom√°ticas baseadas nos dados
                """)
            st.markdown('</div>', unsafe_allow_html=True)
        
        # Como usar
        with st.container():
            st.markdown('<div class="content-box">', unsafe_allow_html=True)
            st.markdown("## üöÄ Como Usar")
            
            st.markdown("""
            1. **Upload de Dados**: Na p√°gina "Dashboard", fa√ßa o upload de um arquivo Excel contendo os registros de paradas.
            2. **Filtros**: Selecione a m√°quina e o per√≠odo desejados para an√°lise.
            3. **An√°lise**: Visualize os gr√°ficos, tabelas e conclus√µes geradas automaticamente.
            4. **Exporta√ß√£o**: Use os bot√µes de download para exportar tabelas e dados para an√°lise detalhada.
            """)
            st.markdown('</div>', unsafe_allow_html=True)
        
        # Formato dos dados
        with st.container():
            st.markdown('<div class="content-box">', unsafe_allow_html=True)
            st.markdown("## üìã Formato dos Dados")
            
            st.markdown("""
            O arquivo Excel deve conter as seguintes colunas:
            
            - **M√°quina**: Identificador da m√°quina (ser√° convertido conforme mapeamento)
            - **Inicio**: Data e hora de in√≠cio da parada
            - **Fim**: Data e hora de fim da parada
            - **Dura√ß√£o**: Tempo de dura√ß√£o da parada (HH:MM:SS)
            - **Parada**: Descri√ß√£o do tipo de parada
            - **√Årea Respons√°vel**: √Årea respons√°vel pela parada
            """)
            
            # Exemplo de dados
            st.markdown("### Exemplo de Dados")
            
            exemplo_dados = pd.DataFrame({
                'M√°quina': [78, 79, 80, 89, 91],
                'Inicio': pd.date_range(start='2023-01-01', periods=5, freq='D'),
                'Fim': pd.date_range(start='2023-01-01 02:00:00', periods=5, freq='D'),
                'Dura√ß√£o': ['02:00:00', '02:00:00', '02:00:00', '02:00:00', '02:00:00'],
                'Parada': ['Manuten√ß√£o', 'Erro de Configura√ß√£o', 'Falta de Insumos', 'Falha El√©trica', 'Troca de Produto'],
                '√Årea Respons√°vel': ['Manuten√ß√£o', 'Opera√ß√£o', 'Log√≠stica', 'Manuten√ß√£o', 'Produ√ß√£o']
            })
            
            st.dataframe(exemplo_dados, use_container_width=True, hide_index=True)
            st.markdown('</div>', unsafe_allow_html=True)
        
        # Tecnologias utilizadas
        with st.container():
            st.markdown('<div class="content-box">', unsafe_allow_html=True)
            st.markdown("## üõ†Ô∏è Tecnologias Utilizadas")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.markdown("""
                ### Frontend
                - **Streamlit**: Framework para cria√ß√£o de aplica√ß√µes web
                - **Plotly**: Biblioteca para cria√ß√£o de gr√°ficos interativos
                - **HTML/CSS**: Estiliza√ß√£o e formata√ß√£o da interface
                """)
            
            with col2:
                st.markdown("""
                ### An√°lise de Dados
                - **Pandas**: Manipula√ß√£o e an√°lise de dados
                - **NumPy**: Computa√ß√£o num√©rica
                - **Matplotlib/Seaborn**: Visualiza√ß√£o de dados
                """)
            
            with col3:
                st.markdown("""
                ### Infraestrutura
                - **Streamlit Cloud**: Hospedagem da aplica√ß√£o
                - **GitHub**: Controle de vers√£o
                - **Python**: Linguagem de programa√ß√£o
                """)
            st.markdown('</div>', unsafe_allow_html=True)
        
        # Requisitos do sistema
        with st.expander("üì¶ Requisitos do Sistema"):
            st.code("""
            # requirements.txt
            streamlit>=1.22.0
            pandas>=2.0.1
            numpy>=1.26.0
            matplotlib>=3.7.1
            seaborn>=0.12.2
            plotly>=5.14.1
            openpyxl>=3.1.2
            xlsxwriter>=3.1.0
            streamlit-option-menu>=0.3.2
            """)
    
    # Rodap√©
    st.markdown("""
    <div class="footer">
        <p>¬© 2023-2025 An√°lise de Efici√™ncia de M√°quinas | Desenvolvido com ‚ù§Ô∏è usando Streamlit</p>
        <p><small>Vers√£o 2.0.0 | √öltima atualiza√ß√£o: Maio 2025</small></p>
    </div>
    """, unsafe_allow_html=True)

# Executa a aplica√ß√£o
if __name__ == "__main__":
    main()
